// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Put your code here:
    
    //A 인지 C 인지 확인
    Mux(a=true, b=false, sel=instruction[15], out=isAoperation);
    Not(in=isAoperation, out=isCoperation);

    //13번째 비트 (A인지 M인지) 확인
    Mux(a=true, b=false, sel=instruction[12], out=useA);

    //ALU를 통한 연산
    Mux16(a=inM, b[0..14]=A, b[15]=false, sel=useA, out=yy);
    ALU(x=D, y=yy, zx=instruction[11], nx=instruction[10], zy=instruction[9], ny=instruction[8], f=instruction[7], no=instruction[6], out=res, out=outM, zr=aluzr, ng=alung); 

    //6번째 비트 (A에 저장) 확인, only C일때만
    And(a=instruction[5], b=isCoperation, out=saveOnA);

    //A 이면 A 에 0~14비트 저장, 아니면 결과를 A 에 저장할건지에 따라 저장
    Mux16(a[0..14]=instruction[0..14], a[15]=false, b=res, sel=isCoperation, out=Ain);
    Or(a=isAoperation, b=saveOnA, out=loadA);
    ARegister(in=Ain, load=loadA, out[0..14]=A, out[15]=trash, out[0..14]=addressM);

    //5번째 비트 (M에 저장) 확인, only C일때만
    And(a=instruction[4], b=isCoperation, out=saveOnD);
    DRegister(in=res, load=saveOnD, out=D);

    //4번째 비트 (D에 저장) 확인, only C일때만
    And(a=instruction[3], b=isCoperation, out=writeM);

    //1~3번째 비트 (점프)
    And(a=instruction[2], b=alung, out=jump1);
    And(a=instruction[1], b=aluzr, out=jump2);
    Or(a=alung, b=aluzr, out=nalups);
    Not(in=nalups, out=alups);
    And(a=instruction[0], b=alups, out=jump3);

    Or(a=jump1, b=jump2, out=jump12);
    Or(a=jump12, b=jump3, out=doJump);
    And(a=doJump, b=isCoperation, out=confirmedDoJump);

    PC(in[0..14]=A,in[15]=false, load=confirmedDoJump, inc=true, reset=reset, out[0..14]=pc, out[15]=trash2);
}